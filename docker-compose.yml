services:
  app_crawler:
    build:
      context: ./goodread
      dockerfile: Dockerfile
    container_name: app_crawler
    depends_on:
      - mongodb
    networks:
      - my_network

  mongodb:
    image: mongo:4.4
    container_name: mongodb
    ports:
      - "27020:27017"
    networks:
      - my_network

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=goodread
      - PGPORT=5432
    ports:
      - 5432:5432
    volumes:
      - ./init:/docker-entrypoint-initdb.d
    networks:
      - my_network

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    depends_on:
      - postgres
    ports:
      - "5050:80"
    networks:
      - my_network

  spark:
    image: bitnami/spark:latest
    container_name: spark
    environment:
      - SPARK_MODE=driver
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_DRIVER_HOST=spark
    ports:
      - "4040:4040"
    volumes:
      - ./spark:/spark # Mount the 'spark' folder containing your script
    command: >
      bash -c "pip install psycopg2-binary &&
              spark-submit --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.3.0,org.postgresql:postgresql:42.5.0 /spark/test_sp.py"

    depends_on:
      - mongodb
      - postgres
    networks:
      - my_network

  zookeeper:
    image: wurstmeister/zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - my_network
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ] # Checking if port 2181 is accessible
      interval: 30s # Run the check every 30 seconds
      timeout: 10s # Fail if the check takes more than 10 seconds
      retries: 5 # Mark as unhealthy after 5 failures
      start_period: 20s # Time to wait before the health check starts

  kafka:
    image: wurstmeister/kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    links:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://:29092,EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000 # 5m
      KAFKA_LOG_RETENTION_HOURS: 5
    volumes:
      - ./kafka-data:/var/lib/kafka/data
    networks:
      - my_network
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ] # Checking if Kafka's port 9092 is open
      interval: 30s # Run the check every 30 seconds
      timeout: 10s # Fail if the check takes more than 10 seconds
      retries: 5 # Mark as unhealthy after 5 failures
      start_period: 30s # Time to wait before starting health checks

  kafdrop:
    image: obsidiandynamics/kafdrop
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
      # JVM_OPTS: "-Xms16M -Xmx512M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    ports:
      - 9000:9000
    networks:
      - my_network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9000/ || exit 1" ]
      interval: 30s # Check every 30 seconds
      timeout: 10s # Wait up to 10 seconds for the check to respond
      retries: 5 # Retry up to 5 times before marking as unhealthy
      start_period: 30s # Give the service 30 seconds to start before beginning health checks

  airflow-init:
    image: apache/airflow:2.7.0
    container_name: airflow-init
    depends_on:
      - postgres
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:admin@postgres/airflow_db
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
    command: >
      bash -c "airflow db upgrade &&
               airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com"
    networks:
      - my_network

  airflow-webserver:
    image: apache/airflow:2.7.0
    container_name: airflow-webserver
    depends_on:
      - postgres
      - airflow-init
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:admin@postgres/airflow_db
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
    ports:
      - "8080:8080"
    command: airflow webserver
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - ./dags:/opt/airflow/dags
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - my_network

  airflow-scheduler:
    image: apache/airflow:2.7.0
    container_name: airflow-scheduler
    depends_on:
      - postgres
      - airflow-init
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:admin@postgres/airflow_db
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
    command: >
      bash -c "pip install apache-airflow-providers-docker &&
            pip install pymongo && pip install confluent-kafka && pip install kafka-python && pip install kafka-python-ng &&
               airflow db upgrade &&
               airflow scheduler"
    volumes:
      - ./dags:/opt/airflow/dags
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - my_network

networks:
  my_network:


volumes:
  postgres-data:
    name: postgres-data
  kafka-data:
    name: kafka-data
